"""!
This module contains the code provided to me by Jayson Paulose.
It takes a set of data points on a sphere of given radius and
finds some interesting quantities for it.


\ingroup lammpstools
"""


import gen_morphexpt as gm
import numpy as np
import scipy
import sys
import os, glob
import re
import skeleton_tools as skt
import cPickle as pickle
import networkx as nx


def point_morph(x, pt_diam = 1.0, radius_thresh = 0.3, res_scale = 8.0,
                R = None, droplet_position = np.array([0,0,0]) ):
    """ !Applies the point_morph analysis to given set of points and assumes
         they are on a sphere with radius R. If no radius is given, it
         determines the radius by fitting it.
    @param x              Positions to perform analysis on
    @param pt_diam        Diameter to assign to each point for making morpholoyy
    @param radius_thresh  ???
    @param res_scale      ???
    @param R              Radius of spherical template
    @param droplet_pos    Position of center of spherical template
    """
    
    # convert into a MorphExpt object, which merges the points into a continous solid
    # and performs various morphological operations that can be used to extract
    # the average width etc.

    if not isinstance( droplet_position, np.ndarray ):
        droplet_position = nd.array( droplet_position, dtype = np.float64 )

    me = gm.gen_morphexpt(x, pt_diam, radius_thresh, res_scale,
                          drop_radius = R, drop_pos = droplet_position)

    # this plot shows the gridded data generated by the morphology.
    # each point is coloured by its distance from the closest edge of the domain.
    
    # plot the approximation to the morphological skeleton of the domain

    # Each skeleton is a list of points that traces out the path in 3D, and a list of distances
    # of those points from the domain edge. The example file has just one contiguous domain and
    # thus just one skeleton

    # some useful data, from the MorphExpt object
    inc_rad = np.max(me.sphere_distance())
    inc_diam = 2*inc_rad
    Rf = me.droplet[3]

    # get the length of the longest piece of the backbone. see the skeleton_tools functions docs for more details.
    
    gg = skt.skel_min_graph_real(me.skeletons[0],me.ptc_dia)
    bb = skt.backbone(gg)
    l = skt.skel_length(bb)
    w = skt.dia_backbone_average(bb)
    return inc_rad, inc_diam, l, w, Rf


